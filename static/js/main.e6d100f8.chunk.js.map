{"version":3,"sources":["Components/TodoList.tsx","Components/Todo.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TodoList","title","todo","id","handleRemoveTodo","handleTodoEdit","handleUpdateTodo","changes","handleSaveOnChange","useState","show","setShow","handleClose","className","Card","Body","onClick","icon","faEdit","faTrashAlt","Modal","onHide","Header","closeButton","Title","value","type","name","placeholder","onChange","Footer","Button","variant","Todo","setId","setTodo","todoList","setTodoList","setChanges","handleTodoChange","e","target","filteredTodoList","filter","fTodo","indexOfId","findIndex","t","splice","console","log","src","alt","Row","Col","xs","md","lg","preventDefault","map","App","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e6d100f8.chunk.js","sourcesContent":["import { faEdit, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useState } from 'react';\nimport { Button, Card, Modal } from 'react-bootstrap';\n\ninterface IChanges {\n    title: string;\n    todo: string;\n    id: number;\n}\n\ninterface ITodoList {\n    title: string;\n    todo: string;\n    id: number;\n    handleRemoveTodo: (id: number) => void;\n    handleTodoEdit: (id: number) => void;\n    handleUpdateTodo: (e: React.ChangeEvent<HTMLInputElement>) => void;\n    changes: IChanges;\n    handleSaveOnChange: () => void;\n}\n\nconst TodoList = ({\n    title,\n    todo,\n    id,\n    handleRemoveTodo,\n    handleTodoEdit,\n    handleUpdateTodo,\n    changes,\n    handleSaveOnChange,\n}: ITodoList) => {\n    // bootstrap modal start\n    const [show, setShow] = useState<boolean>(false);\n    const handleClose = () => setShow(false);\n    const handleShow = () => {\n        setShow(true);\n        handleTodoEdit(id);\n    };\n    // bootstrap modal end\n\n    return (\n        <div className='Todo-card'>\n            <Card className='my-2'>\n                <Card.Body className='d-flex justify-content-between'>\n                    <span>\n                        <strong>{title}: </strong> {todo}\n                    </span>\n                    <>\n                        <span>\n                            <FontAwesomeIcon\n                                onClick={handleShow}\n                                icon={faEdit}\n                                className=\"text-success me-1\"\n                            />\n                            <FontAwesomeIcon\n                                onClick={() => handleRemoveTodo(id)}\n                                icon={faTrashAlt}\n                                className=\"text-danger\"\n                            />\n                        </span>\n                        <Modal show={show} onHide={handleClose}>\n                            <Modal.Header closeButton>\n                                <Modal.Title>Edit</Modal.Title>\n                            </Modal.Header>\n                            <Modal.Body>\n                                <form>\n                                    <input\n                                        className='form-control'\n                                        value={changes.title}\n                                        type='text'\n                                        name='title'\n                                        placeholder='Title'\n                                        onChange={handleUpdateTodo}\n                                    />\n                                    <input\n                                        className='form-control'\n                                        value={changes.todo}\n                                        type='text'\n                                        name='todo'\n                                        placeholder='Write your todo here'\n                                        onChange={handleUpdateTodo}\n                                    />\n                                </form>\n                            </Modal.Body>\n                            <Modal.Footer>\n                                <Button\n                                    variant='secondary'\n                                    onClick={handleClose}\n                                >\n                                    Cancel\n                                </Button>\n                                <Button variant='primary' onClick={handleClose}>\n                                    <span onClick={handleSaveOnChange}>\n                                        Save Changes\n                                    </span>\n                                </Button>\n                            </Modal.Footer>\n                        </Modal>\n                    </>\n                </Card.Body>\n            </Card>\n        </div>\n    );\n};\n\nexport default TodoList;\n","import React, { useState } from 'react';\nimport { Button, Col, Row } from 'react-bootstrap';\nimport TodoList from './TodoList';\n\ninterface ITodo {\n    title: string;\n    todo: string;\n    id: number;\n}\n\nconst Todo = () => {\n    const [id, setId] = useState<number>(0);\n    const [todo, setTodo] = useState<ITodo>({} as ITodo);\n    const [todoList, setTodoList] = useState<ITodo[]>([]);\n\n    const [changes, setChanges] = useState<ITodo>({} as ITodo);\n\n    // handleToDo change or Add to do\n    const handleTodoChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        setTodo({ ...todo, [e.target.name]: e.target.value, id: id });\n    };\n\n    const handleAddTodo = (e: React.MouseEvent<HTMLButtonElement>): void => {\n        e.preventDefault();\n        setId(id + 1);\n        setTodo({ ...todo, id: id });\n        setTodoList([...todoList, todo]);\n        setTodo({\n            title: '',\n            todo: '',\n            id: id,\n        });\n    };\n\n    // handle todo remove button\n    const handleRemoveTodo = (id: number) => {\n        const filteredTodoList = todoList.filter((todo) => todo.id !== id);\n        setTodoList(filteredTodoList);\n    };\n\n    // edit todo function\n    const handleTodoEdit = (id: number) => {\n        const fTodo = todoList.filter((todo) => todo.id === id);\n        setChanges(fTodo[0]);\n    };\n\n    // update todo modal input\n    const handleUpdateTodo = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        setChanges({ ...changes, [e.target.name]: e.target.value });\n    };\n\n    // save on change\n    const handleSaveOnChange = () => {\n        const indexOfId: number = todoList.findIndex(\n            (t) => t.id === changes.id\n        );\n        todoList.splice(indexOfId, 1, changes);\n        setTodoList(todoList);\n        console.log('clicked');\n    };\n\n    return (\n        <div>\n            <img className='img-responsive w-25' src=\"https://i.ibb.co/KXx50d1/Todo-Logo1.png\" alt=\"\" />\n            <form>\n                <Row className='d-flex justify-content-center text-center'>\n                    <Col xs={0} md={3} lg={3}></Col>\n                    <Col xs={12} md={6} lg={6}>\n                        <input\n                            className='form-control mt-2'\n                            value={todo.title}\n                            type='text'\n                            name='title'\n                            placeholder='Title'\n                            onChange={handleTodoChange}\n                        />\n                        <input\n                            className='form-control mt-2'\n                            value={todo.todo}\n                            type='text'\n                            name='todo'\n                            placeholder='Write your todo here'\n                            onChange={handleTodoChange}\n                        />\n                    </Col>\n                    <Col xs={0} md={3} lg={3}></Col>\n                </Row>\n\n                <Button\n                    className='px-5 mt-2'\n                    variant='dark'\n                    onClick={handleAddTodo}\n                >\n                    Add\n                </Button>\n                {todoList.map((t) => (\n                    <TodoList\n                        key={t.id}\n                        title={t.title}\n                        todo={t.todo}\n                        id={t.id}\n                        handleRemoveTodo={handleRemoveTodo}\n                        handleTodoEdit={handleTodoEdit}\n                        handleUpdateTodo={handleUpdateTodo}\n                        changes={changes}\n                        handleSaveOnChange={handleSaveOnChange}\n                    />\n                ))}\n            </form>\n        </div>\n    );\n};\n\nexport default Todo;\n","import { Container } from 'react-bootstrap';\nimport './App.css';\nimport Todo from './Components/Todo';\n\nfunction App() {\n    return (\n        <div className='App'>\n            <Container>\n                <Todo />\n            </Container>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}